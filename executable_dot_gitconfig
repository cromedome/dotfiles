[user]
    name = Jason A. Crome
    email = jason@crome-plated.com

[github]
    user = cromedome

[includeIf "gitdir:~/code/BestPractical/"]
    # path is relative to the file doing the include.
    path = ~/code/BestPractical/.gitconfig-bps

[includeIf "gitdir:~/code/PerlDancer/"]
    # path is relative to the file doing the include.
    path = ~/.gitconfig-cpan

[core]
    excludesfile = ~/.gitignore_global
    ignorecase = false
    editor = vim
    ;pager = diff-so-fancy | less --tabs=4 -RFX

[alias]
    a = add
    # To search the current tree using regular expressions:
    ack = grep --perl-regexp --break --heading --line-number
    # For adding changes onto a commit just made:
    amend = commit --amend -C HEAD
    bd = branch-dates
    bl = branch-log
    bn = checkout -b
    br = branch
    co = checkout
    contains = branch -a --contains
    ci = commit
    cia = commit -a
    cl = clone
    cp = cherry-pick
    cpn= cherry-pick -n
    conflicted = "diff --name-only --diff-filter=U"
    ds = diff --staged
    edit = !"nvim `git ls-files -m --other --exclude-standard` -p" # Edits dirty files, ie things in progress.
    fp = "fetch -p"
    has = branch -a --contains
    mnoff = "merge --no-ff"
    mffo = "merge --ff-only"
    p = push
    # (p)ublish the current (b)ranch
    pb = push -u origin HEAD
    plog = log --pretty=fuller
    pu = pull
    # Patching made perfect
    pa = apply
    pc = apply --check
    pe = patch-extract
    # For updating the wording on a just-made commit:
    reword = commit --amend
    st = status -s
    sb = status -sb
    sc = branch --show-current
    sm = submodule
    hist = log --all --graph --pretty='[%C(cyan)%h%Creset]%C(green)%d%Creset %s%Cblue [%cn]'
    uncommit = reset --soft HEAD^
    unstage = reset HEAD
    up = fetch --all --prune
    standup = shortlog --since=yesterday
    pulley = !git pull && git submodule foreach \"branch=$(git config -f $toplevel/.gitmodules submodule.$name.branch) && git checkout $branch && git pull \"
    wip = "!git commit -a -m'WIP'"

    # Deprecate?
    follow = "!sh -c 'git blame -w -M -C -L $2,$3 -- $1'" -
    forget = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D"
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    # Graph commands
    # Color graph
    lg = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    # Show a (g)raphic history, defaulting to from the current commit:
    g = log --abbrev-commit --graph --decorate --oneline

    # A (s)hort (g)raph, which only shows the most recent 10 lines:
    sg = !git --no-pager log --abbrev-commit --graph --decorate --oneline -n 10

    # Also a short version, which shows all of the commits unique to this
    # branch -- a (b)ranch (g)raph.  Requires that `git-which-branch` (from the `git-tools`
    # repository) be in your path:
    bg = !git --no-pager log --abbrev-commit --graph --decorate --oneline HEAD ^`git which-branch -q`

    # As the previous command, but with gitk:
    bgk = !gitk HEAD ^`git which-branch -q`

    # See http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/?utm_content=buffer99679&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer
    ls = log --pretty=format:"[%C(cyan)%h%Creset]%Cgreen%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(cyan)%h%Cgreen%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # Last N commits
    logn = log --max-count
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    le = log --oneline --decorate
    filelog = log -u
    fl = log -u
    dl = "!git ll -1"
    dlc = diff --cached HEAD^
    la = "!git config -l | grep alias | cut -c 7-"
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    sa = stash apply
    sl = stash list
    sp = stash pop
    ss = stash push

    ## FROM https://gist.github.com/robmiller/6018582
    # Find the commits that were introduced by a merge
    mergelog = "!git log `git merge-span .. $1`"
    ml = "!git log `git merge-span .. $1`"

    # Show the changes that were introduced by a merge
    mergediff = "!git diff `git merge-span ... $1`"
    md = "!git diff `git merge-span ... $1`"

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    dmb = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    ## GAMING GIT
    # Source: http://stackoverflow.com/questions/1486819/which-git-commit-stats-are-easy-to-pull
    # Show running total of number of commits per dev   ==
    winning =   shortlog --summary --numbered --email
    # Source: http://www.element84.com/using-git-log-to-show-last-months-commits.html
    commitslastmonth = !git log --author=\"`git config user.name`\" --before={`date "+%Y-%m-01"`} --after={`date --date=\"$(date +%Y-%m-1) -1 month\" \"+%Y-%m-01\"`} --reverse --pretty=format:\"%cd %h  %s\" --date=short
    commitsthismonth = !git log --author=\"`git config user.name`\" --before=now --after={`date "+%Y-%m-1"`} --reverse --pretty=format:\"%cd %h  %s\" --date=short
    # Source: http://stackoverflow.com/a/5178739/1367612
    commitstoday = log --author=\"`git config user.name`\" --since=\"6am\"

[branch "master"]
    merge = master

[color]
    diff = auto
    interactive = auto
    branch = auto
    ui = true

[color "diff"]
    commit = yellow bold
    meta = yellow
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[diff]
    tool = vimdiff

[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path =

[difftool "vimdiff"]
    cmd = ~/bin/vimdiff $LOCAL $REMOTE
    prompt = false

[init]
    defaultBranch = main

;[pager]
    ;diff = diff-so-fancy | less --tabs=1,5 -RFX
    ;show = diff-so-fancy | less --tabs=1,5 -RFX

[pull]
    #rebase = true
    ff=yes

[push]
    default = current

[merge]
    tool = splice
    ff=false

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

[rerere]
    enabled = true
    autoupdate = true

[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true

[mergetool "splice"]
    cmd = "nvim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true
    keepBackup = false

[rebase]
    #autosquash = true

